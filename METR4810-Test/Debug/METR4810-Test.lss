
METR4810-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000053c  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000378  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052a  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000248  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d6  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001712  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 67 00 	jmp	0xce	; 0xce <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  68:	5f 01       	movw	r10, r30
  6a:	5b 01       	movw	r10, r22
  6c:	5f 01       	movw	r10, r30
  6e:	5b 01       	movw	r10, r22
  70:	6f 01       	movw	r12, r30
  72:	6f 01       	movw	r12, r30
  74:	6f 01       	movw	r12, r30
  76:	6f 01       	movw	r12, r30
  78:	6f 01       	movw	r12, r30
  7a:	6f 01       	movw	r12, r30
  7c:	6f 01       	movw	r12, r30
  7e:	6f 01       	movw	r12, r30
  80:	6f 01       	movw	r12, r30
  82:	6f 01       	movw	r12, r30
  84:	6f 01       	movw	r12, r30
  86:	6f 01       	movw	r12, r30
  88:	6f 01       	movw	r12, r30
  8a:	6f 01       	movw	r12, r30
  8c:	6f 01       	movw	r12, r30
  8e:	6f 01       	movw	r12, r30
  90:	6f 01       	movw	r12, r30
  92:	6f 01       	movw	r12, r30
  94:	6f 01       	movw	r12, r30
  96:	6f 01       	movw	r12, r30
  98:	6f 01       	movw	r12, r30
  9a:	6f 01       	movw	r12, r30
  9c:	6f 01       	movw	r12, r30
  9e:	6f 01       	movw	r12, r30
  a0:	67 01       	movw	r12, r14
  a2:	6f 01       	movw	r12, r30
  a4:	6f 01       	movw	r12, r30
  a6:	67 01       	movw	r12, r14
  a8:	6b 01       	movw	r12, r22
  aa:	6f 01       	movw	r12, r30
  ac:	6f 01       	movw	r12, r30
  ae:	6f 01       	movw	r12, r30
  b0:	6f 01       	movw	r12, r30
  b2:	6f 01       	movw	r12, r30
  b4:	6f 01       	movw	r12, r30
  b6:	6f 01       	movw	r12, r30
  b8:	6f 01       	movw	r12, r30
  ba:	6f 01       	movw	r12, r30
  bc:	6f 01       	movw	r12, r30
  be:	6f 01       	movw	r12, r30
  c0:	6b 01       	movw	r12, r22
  c2:	6f 01       	movw	r12, r30
  c4:	63 01       	movw	r12, r6
  c6:	6f 01       	movw	r12, r30
  c8:	6f 01       	movw	r12, r30
  ca:	6f 01       	movw	r12, r30
  cc:	63 01       	movw	r12, r6

000000ce <__ctors_end>:
  ce:	11 24       	eor	r1, r1
  d0:	1f be       	out	0x3f, r1	; 63
  d2:	cf ef       	ldi	r28, 0xFF	; 255
  d4:	d4 e0       	ldi	r29, 0x04	; 4
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a0 e0       	ldi	r26, 0x00	; 0
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	a0 31       	cpi	r26, 0x10	; 16
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  ee:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <executeCmd>:
#include <avr/io.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>

void executeCmd(int motorCmd[]){
  f6:	fc 01       	movw	r30, r24
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0

	for (int i=0; i<sizeof(motorCmd); i++){
		switch (i){
  fc:	22 30       	cpi	r18, 0x02	; 2
  fe:	31 05       	cpc	r19, r1
 100:	09 f4       	brne	.+2      	; 0x104 <executeCmd+0xe>
 102:	5c c0       	rjmp	.+184    	; 0x1bc <executeCmd+0xc6>
 104:	3c f4       	brge	.+14     	; 0x114 <executeCmd+0x1e>
 106:	21 15       	cp	r18, r1
 108:	31 05       	cpc	r19, r1
 10a:	69 f0       	breq	.+26     	; 0x126 <executeCmd+0x30>
 10c:	21 30       	cpi	r18, 0x01	; 1
 10e:	31 05       	cpc	r19, r1
 110:	61 f1       	breq	.+88     	; 0x16a <executeCmd+0x74>
 112:	9d c0       	rjmp	.+314    	; 0x24e <executeCmd+0x158>
 114:	23 30       	cpi	r18, 0x03	; 3
 116:	31 05       	cpc	r19, r1
 118:	09 f4       	brne	.+2      	; 0x11c <executeCmd+0x26>
 11a:	66 c0       	rjmp	.+204    	; 0x1e8 <executeCmd+0xf2>
 11c:	24 30       	cpi	r18, 0x04	; 4
 11e:	31 05       	cpc	r19, r1
 120:	09 f4       	brne	.+2      	; 0x124 <executeCmd+0x2e>
 122:	7f c0       	rjmp	.+254    	; 0x222 <executeCmd+0x12c>
 124:	94 c0       	rjmp	.+296    	; 0x24e <executeCmd+0x158>
			//motor 0
			case 0:
				switch(motorCmd[0]){
 126:	80 81       	ld	r24, Z
 128:	91 81       	ldd	r25, Z+1	; 0x01
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	c9 f0       	breq	.+50     	; 0x160 <executeCmd+0x6a>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	91 05       	cpc	r25, r1
 132:	69 f0       	breq	.+26     	; 0x14e <executeCmd+0x58>
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	c9 f4       	brne	.+50     	; 0x16a <executeCmd+0x74>
					case -1:
						//motor off
						PORTD &= ~(PIND6 | PIND7);
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	88 7f       	andi	r24, 0xF8	; 248
 13c:	8b b9       	out	0x0b, r24	; 11
						PORTB &= ~PINB0;
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	85 b9       	out	0x05, r24	; 5
						//operate motor clockwise
						PORTD |= PIND6;  //(1<<6); //0b01000000 PD6 = High - enable motor for B0/D7 but disable D7
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	86 60       	ori	r24, 0x06	; 6
 146:	8b b9       	out	0x0b, r24	; 11
						PORTB |= PINB0;   //(1<<0); //0b00000001; // PB0 = High - motor B0 direction
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	85 b9       	out	0x05, r24	; 5
						break;
 14c:	0e c0       	rjmp	.+28     	; 0x16a <executeCmd+0x74>
					case 1:
						//motor off
						PORTD &= ~(PIND6 | PIND7);
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	8b b9       	out	0x0b, r24	; 11
						PORTB &= ~PINB0;
 154:	85 b1       	in	r24, 0x05	; 5
 156:	85 b9       	out	0x05, r24	; 5
						//operate motor counter-clockwise
						PORTD |= PIND7 | PIND6;   //(1<<7) | (1<<6); // 0b11000000; // PD6 = High - enable motor for B0/D7 but disable D7
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	87 60       	ori	r24, 0x07	; 7
 15c:	8b b9       	out	0x0b, r24	; 11
						break;
 15e:	05 c0       	rjmp	.+10     	; 0x16a <executeCmd+0x74>
					case 0:
						//motor off
						PORTD &= ~(PIND6 | PIND7); // PD6 = High - enable motor for B0/D7 but disable D7
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	88 7f       	andi	r24, 0xF8	; 248
 164:	8b b9       	out	0x0b, r24	; 11
						PORTB &= ~PINB0; // PB0 = High - motor B0 direction
 166:	85 b1       	in	r24, 0x05	; 5
 168:	85 b9       	out	0x05, r24	; 5
						break;
					}
			//motor 1
			case 1:
				switch(motorCmd[1]){
 16a:	82 81       	ldd	r24, Z+2	; 0x02
 16c:	93 81       	ldd	r25, Z+3	; 0x03
 16e:	00 97       	sbiw	r24, 0x00	; 0
 170:	f9 f0       	breq	.+62     	; 0x1b0 <executeCmd+0xba>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	91 05       	cpc	r25, r1
 176:	79 f0       	breq	.+30     	; 0x196 <executeCmd+0xa0>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	01 f5       	brne	.+64     	; 0x1bc <executeCmd+0xc6>
					case -1:
						//motor off
						PORTD &= ~PIND5;
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	8a 7f       	andi	r24, 0xFA	; 250
 180:	8b b9       	out	0x0b, r24	; 11
						PORTB &= ~(PINB6 | PINB7);
 182:	85 b1       	in	r24, 0x05	; 5
 184:	88 7f       	andi	r24, 0xF8	; 248
 186:	85 b9       	out	0x05, r24	; 5
						//operate motor clockwise
						PORTD |= PIND5;  
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	85 60       	ori	r24, 0x05	; 5
 18c:	8b b9       	out	0x0b, r24	; 11
						PORTB |= PINB6; 
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	86 60       	ori	r24, 0x06	; 6
 192:	85 b9       	out	0x05, r24	; 5
						break;  
 194:	13 c0       	rjmp	.+38     	; 0x1bc <executeCmd+0xc6>
					case 1:
						//motor off
						PORTD &= ~PIND5;
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	8a 7f       	andi	r24, 0xFA	; 250
 19a:	8b b9       	out	0x0b, r24	; 11
						PORTB &= ~(PINB6 | PINB7);
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	88 7f       	andi	r24, 0xF8	; 248
 1a0:	85 b9       	out	0x05, r24	; 5
						//operate motor counter-clockwise
						PORTD |= PIND5;   
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	85 60       	ori	r24, 0x05	; 5
 1a6:	8b b9       	out	0x0b, r24	; 11
						PORTB |= PINB7;
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	87 60       	ori	r24, 0x07	; 7
 1ac:	85 b9       	out	0x05, r24	; 5
						break;
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <executeCmd+0xc6>
					case 0:
						//motor off
						PORTD &= ~PIND5;
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8a 7f       	andi	r24, 0xFA	; 250
 1b4:	8b b9       	out	0x0b, r24	; 11
						PORTB &= ~(PINB6 | PINB7);
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	88 7f       	andi	r24, 0xF8	; 248
 1ba:	85 b9       	out	0x05, r24	; 5
						break;
					}
			//motor 2
			case 2:
				switch(motorCmd[2]){
 1bc:	84 81       	ldd	r24, Z+4	; 0x04
 1be:	95 81       	ldd	r25, Z+5	; 0x05
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	81 f0       	breq	.+32     	; 0x1e4 <executeCmd+0xee>
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	91 05       	cpc	r25, r1
 1c8:	39 f0       	breq	.+14     	; 0x1d8 <executeCmd+0xe2>
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	69 f4       	brne	.+26     	; 0x1e8 <executeCmd+0xf2>
					case -1:
						//motor off
						PORTC &= ~(PINC0 | PINC1);
 1ce:	40 98       	cbi	0x08, 0	; 8
						PORTB &= ~PINB1;
 1d0:	28 98       	cbi	0x05, 0	; 5
						//operate motor clockwise
						PORTC |= PINC1;
 1d2:	40 9a       	sbi	0x08, 0	; 8
						PORTB |= PINB1;
 1d4:	28 9a       	sbi	0x05, 0	; 5
						break;
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <executeCmd+0xf2>
					case 1:
						//motor off
						PORTC &= ~(PINC0 | PINC1);
 1d8:	40 98       	cbi	0x08, 0	; 8
						PORTB &= ~PINB1;
 1da:	28 98       	cbi	0x05, 0	; 5
						//operate motor counter-clockwise
						PORTC |= PINC0;
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	88 b9       	out	0x08, r24	; 8
						PORTB |= PINB1;
 1e0:	28 9a       	sbi	0x05, 0	; 5
						break;
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <executeCmd+0xf2>
					case 0:
						//motor off
						PORTC &= ~(PINC0 | PINC1);
 1e4:	40 98       	cbi	0x08, 0	; 8
						PORTB &= ~PINB1;
 1e6:	28 98       	cbi	0x05, 0	; 5
						break;
				}
			//motor 3
			case 3:
				switch(motorCmd[3]){
 1e8:	86 81       	ldd	r24, Z+6	; 0x06
 1ea:	97 81       	ldd	r25, Z+7	; 0x07
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	a9 f0       	breq	.+42     	; 0x21a <executeCmd+0x124>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	91 05       	cpc	r25, r1
 1f4:	49 f0       	breq	.+18     	; 0x208 <executeCmd+0x112>
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	a1 f4       	brne	.+40     	; 0x222 <executeCmd+0x12c>
					case -1:
						//motor off
						PORTC &= ~(PINC2 | PINC3);
 1fa:	88 b1       	in	r24, 0x08	; 8
 1fc:	8c 7f       	andi	r24, 0xFC	; 252
 1fe:	88 b9       	out	0x08, r24	; 8
						PORTB &= ~PINB2;
 200:	29 98       	cbi	0x05, 1	; 5
						//operate motor clockwise
						PORTC |= PINC2;
 202:	41 9a       	sbi	0x08, 1	; 8
						PORTB |= PINB2;
 204:	29 9a       	sbi	0x05, 1	; 5
						break;
 206:	0d c0       	rjmp	.+26     	; 0x222 <executeCmd+0x12c>
					case 1:
						//motor off
						PORTC &= ~(PINC2 | PINC3);
 208:	88 b1       	in	r24, 0x08	; 8
 20a:	8c 7f       	andi	r24, 0xFC	; 252
 20c:	88 b9       	out	0x08, r24	; 8
						PORTB &= ~PINB2;
 20e:	29 98       	cbi	0x05, 1	; 5
						//operate motor counter-clockwise
						PORTC |= PINC3;
 210:	88 b1       	in	r24, 0x08	; 8
 212:	83 60       	ori	r24, 0x03	; 3
 214:	88 b9       	out	0x08, r24	; 8
						PORTB |= PINB2;
 216:	29 9a       	sbi	0x05, 1	; 5
						break;
 218:	04 c0       	rjmp	.+8      	; 0x222 <executeCmd+0x12c>
					case 0:
						//motor off
						PORTC &= ~(PINC2 | PINC3);
 21a:	88 b1       	in	r24, 0x08	; 8
 21c:	8c 7f       	andi	r24, 0xFC	; 252
 21e:	88 b9       	out	0x08, r24	; 8
						PORTB &= ~PINB2;
 220:	29 98       	cbi	0x05, 1	; 5
						break;
				}
				
			//motor 4 PWM
			case 4:
				switch(motorCmd[4]){
 222:	80 85       	ldd	r24, Z+8	; 0x08
 224:	91 85       	ldd	r25, Z+9	; 0x09
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	89 f0       	breq	.+34     	; 0x24c <executeCmd+0x156>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	91 05       	cpc	r25, r1
 22e:	41 f0       	breq	.+16     	; 0x240 <executeCmd+0x14a>
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	69 f4       	brne	.+26     	; 0x24e <executeCmd+0x158>
					case -1:
						//motor off
						PORTD &= ~PIND4;
 234:	5a 98       	cbi	0x0b, 2	; 11
						//operate motor clockwise
						//OCR2B = 0xFF // 100% duty cycle
						PORTD |= PIND3;
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	83 60       	ori	r24, 0x03	; 3
 23a:	8b b9       	out	0x0b, r24	; 11
						PORTD |= PIND4;
 23c:	5a 9a       	sbi	0x0b, 2	; 11
						break;
 23e:	07 c0       	rjmp	.+14     	; 0x24e <executeCmd+0x158>
					case 1:
						//motor off
						PORTD &= ~PIND4;
 240:	5a 98       	cbi	0x0b, 2	; 11
						//operate motor counter-clockwise
						PORTD &= ~PIND3;
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	8c 7f       	andi	r24, 0xFC	; 252
 246:	8b b9       	out	0x0b, r24	; 11
						PORTD |= PIND4;
 248:	5a 9a       	sbi	0x0b, 2	; 11
						break;
 24a:	01 c0       	rjmp	.+2      	; 0x24e <executeCmd+0x158>
					case 0:
						//motor off
						PORTD &= ~PIND4;
 24c:	5a 98       	cbi	0x0b, 2	; 11
#include <stdlib.h>
#include <stdio.h>

void executeCmd(int motorCmd[]){

	for (int i=0; i<sizeof(motorCmd); i++){
 24e:	2f 5f       	subi	r18, 0xFF	; 255
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	22 30       	cpi	r18, 0x02	; 2
 254:	31 05       	cpc	r19, r1
 256:	09 f0       	breq	.+2      	; 0x25a <executeCmd+0x164>
 258:	51 cf       	rjmp	.-350    	; 0xfc <executeCmd+0x6>
						break;
				}
		}
	}
	
}
 25a:	08 95       	ret

0000025c <init>:


void init(void){
	// setup
	// DDR 
	DDRB = 0x00;
 25c:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;
 25e:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x00;
 260:	1a b8       	out	0x0a, r1	; 10
	// in
	DDRB &= (0xFF & ~(PORTB3 | PORTB4 | PORTB5));
 262:	84 b1       	in	r24, 0x04	; 4
 264:	88 7f       	andi	r24, 0xF8	; 248
 266:	84 b9       	out	0x04, r24	; 4
	DDRC &= (0xFF & ~(PORTC4 | PORTC6)); // Camera data
 268:	87 b1       	in	r24, 0x07	; 7
 26a:	89 7f       	andi	r24, 0xF9	; 249
 26c:	87 b9       	out	0x07, r24	; 7
	DDRD &= (0xFF & ~PORTD0); // Wifi RX
 26e:	8a b1       	in	r24, 0x0a	; 10
 270:	8a b9       	out	0x0a, r24	; 10
	// out
	DDRB |= PORTB0 | PORTB1 | PORTB2 | PORTB6 | PORTB7; // Motor 4 cc/w, Motor 1 enable, Motor 2 enable, Motor 3 c/w, Motor 3 cc/w
 272:	84 b1       	in	r24, 0x04	; 4
 274:	87 60       	ori	r24, 0x07	; 7
 276:	84 b9       	out	0x04, r24	; 4
	DDRC |= PORTC0 | PORTC1 | PORTC2 | PORTC3 | PORTC5; // Motor 1 c/w, Motor 1 cc/w, Motor 2 c/w, Motor 2 cc/w, Camera clock
 278:	87 b1       	in	r24, 0x07	; 7
 27a:	87 60       	ori	r24, 0x07	; 7
 27c:	87 b9       	out	0x07, r24	; 7
	DDRD |= PORTD1 | PORTD2 | PORTD3 | PORTD4 | PORTD6 | PORTD7; // Wifi TX, LEDs, Servo PWM, Server on, Motor 4 enable, Motor 4 c/w
 27e:	8a b1       	in	r24, 0x0a	; 10
 280:	87 60       	ori	r24, 0x07	; 7
 282:	8a b9       	out	0x0a, r24	; 10
	
	// PORTS
	// all off for init
	PORTB = 0x00;
 284:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
 286:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
 288:	1b b8       	out	0x0b, r1	; 11
	// on for programming
	PORTB &= (0xFF);
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	85 b9       	out	0x05, r24	; 5
	PORTC &= (0xFF);
 28e:	88 b1       	in	r24, 0x08	; 8
 290:	88 b9       	out	0x08, r24	; 8
	// always on
	//PORTC |= PINC4 | PINC5; // Camera data, Camera clock -- defined in videoFrame.c
	PORTD |= PIND0 | PIND1; // Wifi RX, Wifi TX
 292:	58 9a       	sbi	0x0b, 0	; 11
 294:	08 95       	ret

00000296 <keyPressed>:
	/*motorCmd[0] = 0;
	motorCmd[1] = 0;
	motorCmd[2] = 0;
	motorCmd[3] = 0;
	motorCmd[4] = 0;*/
	char key = getchar();
 296:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__iob>
 29a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__iob+0x1>
 29e:	0e 94 a6 01 	call	0x34c	; 0x34c <fgetc>
	//for each key loop
	switch(key) {
 2a2:	fc 01       	movw	r30, r24
 2a4:	ff 27       	eor	r31, r31
 2a6:	b5 97       	sbiw	r30, 0x25	; 37
 2a8:	e3 33       	cpi	r30, 0x33	; 51
 2aa:	f1 05       	cpc	r31, r1
 2ac:	c0 f4       	brcc	.+48     	; 0x2de <keyPressed+0x48>
 2ae:	ec 5c       	subi	r30, 0xCC	; 204
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	0c 94 a0 01 	jmp	0x340	; 0x340 <__tablejump2__>
			} else {
				motorCmd[0] = 1;
			}
		case 0x28://"DOWN"://0x28:
			if(key == !(0x26 || 0x28) || (0x26 && 0x28)){//!("UP" | "DOWN") | ("UP" & "DOWN"):
				motorCmd[0] = 0;
 2b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 2ba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			} else {
				motorCmd[1] = 1;
			}
		case 0x27://"RIGHT"://0x27:
			if(key == !(0x25 || 0x27) || (0x25 && 0x27)){//!("LEFT" | "RIGHT") | ("LEFT" & "RIGHT"):
				motorCmd[1] = 0;
 2be:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 2c2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
			} else{
				motorCmd[2] = 1;
			}
		case 0x53://"S"://0x53:
			if (key == !(0x57 || 0x53) || (0x57 && 0x53)){//!("W" | "S") | ("W" & "S"):
				motorCmd[2] = 0;
 2c6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_edata+0x5>
 2ca:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_edata+0x4>
			} else {
				motorCmd[3] = 1;
			}
		case 0x44://"D"://0x44:
			if (key == !(0x41 || 0x44) || (0x41 && 0x44)){//!("A" | "D") | ("A" & "D"):
				motorCmd[3] = 0;
 2ce:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_edata+0x7>
 2d2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_edata+0x6>
			} else {
				motorCmd[4] = 1;
			}
		case 0x45://"E"://0x45:
			if (key == !(0x51 || 0x45) || (0x51 && 0x45)){//!("Q" | "E") | ("Q" & "E");
				motorCmd[4] = 0;
 2d6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_edata+0x9>
 2da:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_edata+0x8>
				motorCmd[4] = -1;
			}
	}
    return motorCmd;
	
};
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	08 95       	ret

000002e4 <main>:
#define is_low(x,y) ((x & _BV(y)) == 0) //check if the input pin is low
*/
//main


int main(void){
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	2a 97       	sbiw	r28, 0x0a	; 10
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
	
	int ping = 0;
	int *motorP;
	int motorCmd[5] = {0};
 2f8:	fe 01       	movw	r30, r28
 2fa:	31 96       	adiw	r30, 0x01	; 1
 2fc:	8a e0       	ldi	r24, 0x0A	; 10
 2fe:	df 01       	movw	r26, r30
 300:	1d 92       	st	X+, r1
 302:	8a 95       	dec	r24
 304:	e9 f7       	brne	.-6      	; 0x300 <main+0x1c>
	motorCmd[0] = 0;
	motorCmd[1] = 0;
	motorCmd[2] = 0;
	motorCmd[3] = 0;
	motorCmd[4] = 0; */
	init();
 306:	0e 94 2e 01 	call	0x25c	; 0x25c <init>
	videoFrame();
 30a:	0e 94 9c 01 	call	0x338	; 0x338 <videoFrame>
 30e:	8e 01       	movw	r16, r28
 310:	05 5f       	subi	r16, 0xF5	; 245
 312:	1f 4f       	sbci	r17, 0xFF	; 255
	while(ping != 1){
 314:	0b c0       	rjmp	.+22     	; 0x32c <main+0x48>
		
		motorP = keyPressed();
		for (int i = 0; i < 5; i++) {
			motorCmd[i] = *(motorP + i);
 316:	8d 91       	ld	r24, X+
 318:	9d 91       	ld	r25, X+
 31a:	81 93       	st	Z+, r24
 31c:	91 93       	st	Z+, r25
	init();
	videoFrame();
	while(ping != 1){
		
		motorP = keyPressed();
		for (int i = 0; i < 5; i++) {
 31e:	e0 17       	cp	r30, r16
 320:	f1 07       	cpc	r31, r17
 322:	c9 f7       	brne	.-14     	; 0x316 <main+0x32>
			motorCmd[i] = *(motorP + i);
		}
		//if (motorCmd != NULL){
		executeCmd(motorCmd);
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	0e 94 7b 00 	call	0xf6	; 0xf6 <executeCmd>
	motorCmd[4] = 0; */
	init();
	videoFrame();
	while(ping != 1){
		
		motorP = keyPressed();
 32c:	0e 94 4b 01 	call	0x296	; 0x296 <keyPressed>
 330:	dc 01       	movw	r26, r24
 332:	fe 01       	movw	r30, r28
 334:	31 96       	adiw	r30, 0x01	; 1
 336:	ef cf       	rjmp	.-34     	; 0x316 <main+0x32>

00000338 <videoFrame>:
#include <stdlib.h>
#include <stdio.h>

void videoFrame(){
	//start camera
	PORTC |= PINC4 | PINC5;
 338:	88 b1       	in	r24, 0x08	; 8
 33a:	85 60       	ori	r24, 0x05	; 5
 33c:	88 b9       	out	0x08, r24	; 8
 33e:	08 95       	ret

00000340 <__tablejump2__>:
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	05 90       	lpm	r0, Z+
 346:	f4 91       	lpm	r31, Z
 348:	e0 2d       	mov	r30, r0
 34a:	09 94       	ijmp

0000034c <fgetc>:
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	ec 01       	movw	r28, r24
 352:	2b 81       	ldd	r18, Y+3	; 0x03
 354:	20 ff       	sbrs	r18, 0
 356:	33 c0       	rjmp	.+102    	; 0x3be <fgetc+0x72>
 358:	26 ff       	sbrs	r18, 6
 35a:	0a c0       	rjmp	.+20     	; 0x370 <fgetc+0x24>
 35c:	2f 7b       	andi	r18, 0xBF	; 191
 35e:	2b 83       	std	Y+3, r18	; 0x03
 360:	8e 81       	ldd	r24, Y+6	; 0x06
 362:	9f 81       	ldd	r25, Y+7	; 0x07
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	9f 83       	std	Y+7, r25	; 0x07
 368:	8e 83       	std	Y+6, r24	; 0x06
 36a:	8a 81       	ldd	r24, Y+2	; 0x02
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	29 c0       	rjmp	.+82     	; 0x3c2 <fgetc+0x76>
 370:	22 ff       	sbrs	r18, 2
 372:	0f c0       	rjmp	.+30     	; 0x392 <fgetc+0x46>
 374:	e8 81       	ld	r30, Y
 376:	f9 81       	ldd	r31, Y+1	; 0x01
 378:	80 81       	ld	r24, Z
 37a:	08 2e       	mov	r0, r24
 37c:	00 0c       	add	r0, r0
 37e:	99 0b       	sbc	r25, r25
 380:	00 97       	sbiw	r24, 0x00	; 0
 382:	19 f4       	brne	.+6      	; 0x38a <fgetc+0x3e>
 384:	20 62       	ori	r18, 0x20	; 32
 386:	2b 83       	std	Y+3, r18	; 0x03
 388:	1a c0       	rjmp	.+52     	; 0x3be <fgetc+0x72>
 38a:	31 96       	adiw	r30, 0x01	; 1
 38c:	f9 83       	std	Y+1, r31	; 0x01
 38e:	e8 83       	st	Y, r30
 390:	0e c0       	rjmp	.+28     	; 0x3ae <fgetc+0x62>
 392:	ea 85       	ldd	r30, Y+10	; 0x0a
 394:	fb 85       	ldd	r31, Y+11	; 0x0b
 396:	09 95       	icall
 398:	97 ff       	sbrs	r25, 7
 39a:	09 c0       	rjmp	.+18     	; 0x3ae <fgetc+0x62>
 39c:	2b 81       	ldd	r18, Y+3	; 0x03
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <fgetc+0x5a>
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <fgetc+0x5c>
 3a6:	80 e1       	ldi	r24, 0x10	; 16
 3a8:	82 2b       	or	r24, r18
 3aa:	8b 83       	std	Y+3, r24	; 0x03
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <fgetc+0x72>
 3ae:	2e 81       	ldd	r18, Y+6	; 0x06
 3b0:	3f 81       	ldd	r19, Y+7	; 0x07
 3b2:	2f 5f       	subi	r18, 0xFF	; 255
 3b4:	3f 4f       	sbci	r19, 0xFF	; 255
 3b6:	3f 83       	std	Y+7, r19	; 0x07
 3b8:	2e 83       	std	Y+6, r18	; 0x06
 3ba:	99 27       	eor	r25, r25
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <fgetc+0x76>
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	9f ef       	ldi	r25, 0xFF	; 255
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
